from flask import Flask, render_template_string, request, jsonify
import yfinance as yf
import pandas as pd
from datetime import datetime, timedelta

app = Flask(_name_)

# Top 20 Indian Stocks for Backtesting
TOP_STOCKS = [
    'RELIANCE.NS', 'TCS.NS', 'HDFCBANK.NS', 'INFY.NS', 'HINDUNILVR.NS',
    'ICICIBANK.NS', 'KOTAKBANK.NS', 'BHARTIARTL.NS', 'ITC.NS', 'SBIN.NS',
    'ASIANPAINT.NS', 'DMART.NS', 'BAJFINANCE.NS', 'WIPRO.NS', 'SUNPHARMA.NS',
    'AXISBANK.NS', 'MARUTI.NS', 'TITAN.NS', 'ULTRACEMCO.NS', 'TECHM.NS'
]

HTML_TEMPLATE = '''
<!DOCTYPE html>
<html>
<head>
    <title>‡®ü‡©ç‡®∞‡©à‡®ï‡®ü‡®∞ ‡®ú‡©Ä - Backtesting ‡®ê‡®™</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body { font-family: Arial; margin: 20px; background: #f0f0f0; }
        .container { max-width: 800px; margin: auto; background: white; padding: 20px; border-radius: 10px; }
        .btn { background: #007bff; color: white; padding: 10px; border: none; border-radius: 5px; margin: 5px; }
        .stock-card { background: #e9ecef; margin: 10px 0; padding: 15px; border-radius: 5px; }
        .good { border-left: 5px solid #28a745; }
        .avg { border-left: 5px solid #ffc107; }
        .poor { border-left: 5px solid #dc3545; }
    </style>
</head>
<body>
    <div class="container">
        <h2>üìà ‡®ü‡©ç‡®∞‡©à‡®ï‡®ü‡®∞ ‡®ú‡©Ä - ‡®∏‡®ü‡®æ‡®ï Backtesting</h2>
        
        <button class="btn" onclick="testToday()">‡®Ö‡©±‡®ú ‡®¶‡©á ‡®°‡©á‡®ü‡®æ '‡®§‡©á ‡®ü‡©à‡®∏‡®ü ‡®ï‡®∞‡©ã</button>
        <button class="btn" onclick="testYesterday()">‡®ï‡®≤ ‡®¶‡©á ‡®°‡©á‡®ü‡®æ '‡®§‡©á ‡®ü‡©à‡®∏‡®ü ‡®ï‡®∞‡©ã</button>
        <button class="btn" onclick="testLastWeek()">‡®™‡®ø‡®õ‡®≤‡©á ‡®π‡®´‡®º‡®§‡©á ‡®ü‡©à‡®∏‡®ü ‡®ï‡®∞‡©ã</button>
        
        <div id="results"></div>
    </div>

    <script>
        async function testToday() {
            runTest('today');
        }
        
        async function testYesterday() {
            runTest('yesterday');
        }
        
        async function testLastWeek() {
            runTest('lastweek');
        }
        
        async function runTest(period) {
            const resultsDiv = document.getElementById('results');
            resultsDiv.innerHTML = '<div class="stock-card">‡®ü‡©à‡®∏‡®ü‡®ø‡©∞‡®ó ‡®ö‡©±‡®≤ ‡®∞‡®π‡©Ä ‡®π‡©à... ‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®â‡®°‡©Ä‡®ï ‡®ï‡®∞‡©ã</div>';
            
            try {
                const response = await fetch('/backtest?period=' + period);
                const data = await response.json();
                
                let html = '<h3>Backtesting ‡®®‡®§‡©Ä‡®ú‡©á:</h3>';
                
                data.results.forEach((stock, index) => {
                    let ratingClass = 'avg';
                    if (stock.score >= 80) ratingClass = 'good';
                    if (stock.score <= 50) ratingClass = 'poor';
                    
                    html += `<div class="stock-card ${ratingClass}">
                        <strong>${index + 1}. ${stock.symbol.replace('.NS', '')}</strong><br>
                        Score: ${stock.score}/100<br>
                        ‡®ï‡©Ä‡®Æ‡®§ ‡®¨‡®¶‡®≤‡®æ‡®Ö: ${stock.price_change}%<br>
                        ‡®µ‡®æ‡®≤‡©Ä‡®ä‡®Æ ‡®∞‡©á‡®∏‡®º‡©Ä‡®ì: ${stock.volume_ratio}x<br>
                        ‡®Æ‡©ã‡®Æ‡©à‡®Ç‡®ü‡®Æ: ${stock.momentum}<br>
                        ‡®§‡®æ‡®∞‡©Ä‡®ñ: ${stock.date}
                    </div>`;
                });
                
                resultsDiv.innerHTML = html;
            } catch (error) {
                resultsDiv.innerHTML = '<div class="stock-card poor">‡®ó‡®≤‡®§‡©Ä ‡®π‡©ã‡®à‡•§ ‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®¨‡®æ‡®Ö‡®¶ ‡®µ‡®ø‡©±‡®ö ‡®¶‡©Å‡®¨‡®æ‡®∞‡®æ ‡®ï‡©ã‡®∏‡®º‡®ø‡®∏‡®º ‡®ï‡®∞‡©ã„ÄÇ</div>';
            }
        }
    </script>
</body>
</html>
'''

def calculate_score(stock_data):
    """‡®∏‡®ü‡®æ‡®ï ‡®¶‡®æ score 0-100 ‡®µ‡®ø‡©±‡®ö ‡®ï‡©à‡®≤‡®ï‡©Å‡®≤‡©á‡®ü ‡®ï‡®∞‡©ã"""
    score = 50  # base score
    
    try:
        # ‡®ï‡©Ä‡®Æ‡®§ ‡®¨‡®¶‡®≤‡®æ‡®Ö (30 points)
        price_change = ((stock_data['Close'][-1] - stock_data['Close'][0]) / stock_data['Close'][0]) * 100
        score += min(30, abs(price_change) * 0.5)
        
        # ‡®µ‡®æ‡®≤‡©Ä‡®ä‡®Æ ‡®∞‡©á‡®∏‡®º‡©Ä‡®ì (30 points)
        volume_ratio = stock_data['Volume'][-1] / stock_data['Volume'].mean()
        score += min(30, volume_ratio * 10)
        
        # ‡®Æ‡©ã‡®Æ‡©à‡®Ç‡®ü‡®Æ (20 points)
        momentum = stock_data['Close'][-1] > stock_data['Close'].mean()
        if momentum:
            score += 20
            
        # High-Low range (20 points)
        high_low_ratio = (stock_data['High'].max() - stock_data['Low'].min()) / stock_data['Close'].mean()
        score += min(20, high_low_ratio * 100)
        
    except:
        pass
    
    return min(100, max(0, int(score)))

def get_momentum_text(score):
    """‡®Æ‡©ã‡®Æ‡©à‡®Ç‡®ü‡®Æ ‡®¶‡®æ text return ‡®ï‡®∞‡©ã"""
    if score >= 80:
        return "‡®¨‡®π‡©Å‡®§ ‡®µ‡®ß‡©Ä‡®Ü"
    elif score >= 60:
        return "‡®µ‡®ß‡©Ä‡®Ü" 
    elif score >= 40:
        return "‡®†‡©Ä‡®ï ‡®†‡®æ‡®ï"
    else:
        return "‡®ï‡®Æ‡®ú‡®º‡©ã‡®∞"

@app.route('/')
def home():
    return render_template_string(HTML_TEMPLATE)

@app.route('/backtest')
def backtest():
    period = request.args.get('period', 'today')
    
    # Date range ‡®∏‡©à‡©±‡®ü ‡®ï‡®∞‡©ã
    end_date = datetime.now().date()
    
    if period == 'yesterday':
        end_date = end_date - timedelta(days=1)
        start_date = end_date - timedelta(days=1)
    elif period == 'lastweek':
        start_date = end_date - timedelta(days=7)
    else:  # today
        start_date = end_date - timedelta(days=1)
    
    results = []
    
    for symbol in TOP_STOCKS:
        try:
            # Historical data ‡®≤‡©ã
            stock_data = yf.download(symbol, start=start_date, end=end_date + timedelta(days=1), interval='1h')
            
            if len(stock_data) > 5:
                # Score ‡®ï‡©à‡®≤‡®ï‡©Å‡®≤‡©á‡®ü ‡®ï‡®∞‡©ã
                score = calculate_score(stock_data)
                
                # Price change
                price_change = ((stock_data['Close'][-1] - stock_data['Close'][0]) / stock_data['Close'][0]) * 100
                
                # Volume ratio
                volume_ratio = round(stock_data['Volume'][-1] / stock_data['Volume'].mean(), 2)
                
                results.append({
                    'symbol': symbol,
                    'score': score,
                    'price_change': round(price_change, 2),
                    'volume_ratio': volume_ratio,
                    'momentum': get_momentum_text(score),
                    'date': start_date.strftime('%Y-%m-%d')
                })
                
        except Exception as e:
            print(f"Error with {symbol}: {e}")
    
    # Score ‡®¶‡©á ‡®Ö‡®®‡©Å‡®∏‡®æ‡®∞ sort ‡®ï‡®∞‡©ã
    results.sort(key=lambda x: x['score'], reverse=True)
    
    return jsonify({'results': results[:10]})  # ‡®∏‡®ø‡®∞‡®´‡®º ‡®ü‡®æ‡®™ 10

if _name_ == '_main_':
    app.run(debug=True)
