from flask import Flask, render_template
import yfinance as yf
import pandas as pd
import schedule
import time
import threading

app = Flask(_name_)

# ‡®á‡©∞‡®ü‡®∞‡®æ‡®°‡©á ‡®∏‡®ï‡®∞‡©Ä‡®®‡®ø‡©∞‡®ó ‡®´‡©∞‡®ï‡®∏‡®º‡®®‡®∏
def get_intraday_data(symbol):
    """‡®∏‡®ü‡®æ‡®ï ‡®¶‡®æ ‡®á‡©∞‡®ü‡®∞‡®æ‡®°‡©á ‡®°‡©á‡®ü‡®æ ‡®≤‡©à‡®Ç‡®¶‡®æ ‡®π‡©à"""
    try:
        stock = yf.Ticker(symbol)
        data = stock.history(period="1d", interval="5m")
        return data
    except Exception as e:
        print(f"Error fetching {symbol}: {e}")
        return None

def check_intraday_signals(data):
    """‡®á‡©∞‡®ü‡®∞‡®æ‡®°‡©á ‡®∏‡®ø‡®ó‡®®‡®≤ ‡®ö‡©à‡©±‡®ï ‡®ï‡®∞‡®¶‡®æ ‡®π‡©à"""
    if data is None or len(data) < 2:
        return False
    
    current = data.iloc[-1]
    previous = data.iloc[-2]
    
    # ‡®µ‡®æ‡®≤‡©Ä‡®ä‡®Æ ‡®¨‡©ç‡®∞‡©á‡®ï‡®Ü‡®ä‡®ü
    volume_breakout = current['Volume'] > previous['Volume'] * 1.5
    
    # ‡®ï‡©Ä‡®Æ‡®§ ‡®µ‡®æ‡®ß‡®æ
    price_surge = ((current['Close'] - previous['Close']) / previous['Close']) * 100 > 2.0
    
    return volume_breakout and price_surge

# ‡®ó‡®≤‡©ã‡®¨‡®≤ ‡®µ‡©á‡®∞‡©Ä‡®è‡®¨‡®≤ ‡®®‡®§‡©Ä‡®ú‡®ø‡®Ü‡®Ç ‡®≤‡®à
intraday_results = []

def run_intraday_screener():
    """‡®á‡©∞‡®ü‡®∞‡®æ‡®°‡©á ‡®∏‡®ï‡®∞‡©Ä‡®®‡®∞ ‡®ö‡®≤‡®æ‡®â‡®Ç‡®¶‡®æ ‡®π‡©à"""
    global intraday_results
    stocks = ['RELIANCE.NS', 'TCS.NS', 'INFY.NS', 'HDFCBANK.NS', 'ICICIBANK.NS']
    
    good_stocks = []
    for symbol in stocks:
        data = get_intraday_data(symbol)
        if check_intraday_signals(data):
            good_stocks.append(symbol)
    
    intraday_results = good_stocks
    print(f"üîÑ ‡®á‡©∞‡®ü‡®∞‡®æ‡®°‡©á ‡®∏‡®ï‡©à‡®® ‡®ï‡©Ä‡®§‡®æ: {good_stocks}")

# ‡®¨‡©à‡®ï‡®ó‡©ç‡®∞‡®æ‡®ä‡®Ç‡®° ‡®µ‡®ø‡©±‡®ö ‡®∏‡®ï‡®∞‡©Ä‡®®‡®∞ ‡®ö‡®≤‡®æ‡®â‡®£ ‡®≤‡®à
def start_scheduler():
    """‡®π‡®∞ 5 ‡®Æ‡®ø‡©∞‡®ü ‡®¨‡®æ‡®Ö‡®¶ ‡®∏‡®ï‡®∞‡©Ä‡®®‡®∞ ‡®ö‡®≤‡®æ‡®â‡®Ç‡®¶‡®æ ‡®π‡©à"""
    schedule.every(5).minutes.do(run_intraday_screener)
    run_intraday_screener()  # ‡®™‡®π‡®ø‡®≤‡®æ‡®Ç ‡®á‡©±‡®ï ‡®µ‡®æ‡®∞ ‡®ö‡®≤‡®æ‡®ì
    
    while True:
        schedule.run_pending()
        time.sleep(1)

# ‡®∞‡©Ç‡®ü‡®∏
@app.route('/')
def index():
    """‡®Æ‡©Å‡©±‡®ñ ‡®™‡©á‡®ú"""
    return render_template('index.html', intraday_stocks=intraday_results)

@app.route('/intraday')
def intraday():
    """‡®∏‡®ø‡®∞‡®´ ‡®á‡©∞‡®ü‡®∞‡®æ‡®°‡©á ‡®®‡®§‡©Ä‡®ú‡©á ‡®¶‡®ø‡®ñ‡®æ‡®â‡®Ç‡®¶‡®æ ‡®π‡©à"""
    return {
        'status': 'success',
        'intraday_stocks': intraday_results,
        'count': len(intraday_results)
    }

if _name_ == '_main_':
    # ‡®¨‡©à‡®ï‡®ó‡©ç‡®∞‡®æ‡®ä‡®Ç‡®° ‡®∏‡®ï‡®∞‡©Ä‡®®‡®∞ ‡®∏‡®º‡©Å‡®∞‡©Ç ‡®ï‡®∞‡©ã
    scheduler_thread = threading.Thread(target=start_scheduler)
    scheduler_thread.daemon = True
    scheduler_thread.start()
    
    # Flask ‡®ê‡®™ ‡®ö‡®≤‡®æ‡®ì
    app.run(debug=True)
